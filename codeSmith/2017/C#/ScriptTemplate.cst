
<script runat="template">
public string Camel(string str)
{

	str=str.Substring(0,1).ToLower()+str.Substring(1);
	
	return str;
}
// My methods here.
public string GetUpper(string str)
{
	str=str.Substring(0,1).ToUpper()+str.Substring(1);
	return str;
}
public string getT_Table(string str)
{
	str=str.Substring(2);
	str=str.Replace("_","");
	return str;
}

public string GetCSType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string convertColumnType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return Camel(column.Name)+".ToString()";
		case DbType.AnsiStringFixedLength: return Camel(column.Name)+".ToString()";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "("+Camel(column.Name)+" == \"1\" ? true : false)";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return Camel(column.Name)+".ToString()";
		case DbType.DateTime: return Camel(column.Name)+".ToString()";
		case DbType.Decimal: return  "decimal.Parse("+Camel(column.Name)+".ToString())";
		case DbType.Double: return  "double.Parse("+Camel(column.Name)+".ToString())";
		case DbType.Guid: return "Guid.NewGuid().ToString()";
		case DbType.Int16: return "short";
		case DbType.Int32: return  "int.Parse("+Camel(column.Name)+".ToString())";
		case DbType.Int64: return "long.Parse("+Camel(column.Name)+".ToString())";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return  "float.Parse("+Camel(column.Name)+".ToString())";
		case DbType.String: return Camel(column.Name)+".ToString()";
		case DbType.StringFixedLength: return Camel(column.Name)+".ToString()";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal.Parse("+Camel(column.Name)+".ToString())";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
    
    

public string GetCSTypeUpper(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "String";
		case DbType.AnsiStringFixedLength: return "String";
		case DbType.Binary: return "Byte[]";
		case DbType.Boolean: return "Boolean";
		case DbType.Byte: return "Byte";
		case DbType.Currency: return "Decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "Decimal";
		case DbType.Double: return "Double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "Int32";
		case DbType.Int64: return "Int64";
		case DbType.Object: return "Object";
		case DbType.SByte: return "SByte";
		case DbType.Single: return "Float";
		case DbType.String: return "String";
		case DbType.StringFixedLength: return "String";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "UInt32";
		case DbType.UInt64: return "UInt64";
		case DbType.VarNumeric: return "Decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

/// <summary>
/// 获取sqlserver的数据库类型值
/// </summary>
/// <param name="column"></param>
/// <param name="isDefault"></param>
/// <returns></returns>
public string getSqlserverDbType(ColumnSchema column,bool isDefault)
{
    string defaultVal="";
    if(isDefault)
       defaultVal= GetSqlserverDefaultStr(column);
    if(column.NativeType.ToUpper()=="VARCHAR"||column.NativeType.ToUpper()=="NVARCHAR"||column.NativeType.ToUpper()=="CHAR"
        ||column.NativeType.ToUpper()=="NCHAR")//||column.NativeType=="BIT"||column.NativeType=="bigint"||column.NativeType=="DateTime"||column.NativeType=="")
    {
        return column.NativeType+"("+column.Size+")"+defaultVal;
    }else if(column.NativeType.ToUpper()=="DECIMAL")
        return column.NativeType+"("+column.Precision+","+column.Scale+")"+defaultVal;
    else
        return column.NativeType+defaultVal;
}
/// <summary>
/// 获取sqlserver的数据库类型值
/// </summary>
/// <param name="column"></param>
/// <param name="isDefault"></param>
/// <returns></returns>
public string getSqlserverDbType(ColumnSchema column)
{
    
        return getSqlserverDbType(column,false);
}


/// <summary>
/// 获取sqlserver 存储过程的数据库类型值
/// </summary>
/// <param name="schema"></param>
/// <returns></returns>
public string getSqlserverProcDbType(ParameterSchema schema)
{
    if(schema.NativeType.ToUpper()=="VARCHAR"||schema.NativeType.ToUpper()=="NVARCHAR"||schema.NativeType.ToUpper()=="CHAR"
        ||schema.NativeType.ToUpper()=="NCHAR")//||column.NativeType=="BIT"||column.NativeType=="bigint"||column.NativeType=="DateTime"||column.NativeType=="")
    {
        return schema.NativeType+"("+schema.Size+")";
    }else if(schema.NativeType.ToUpper()=="DECIMAL")
        return schema.NativeType+"("+schema.Precision+","+schema.Scale+")";
    else
        return schema.NativeType;
}

public string GetCSDBTypeUpper(ParameterSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "String";
		case DbType.AnsiStringFixedLength: return "String";
		case DbType.Binary: return "Byte[]";
		case DbType.Boolean: return "Boolean";
		case DbType.Byte: return "Byte";
		case DbType.Currency: return "Decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "Decimal";
		case DbType.Double: return "Double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "Int32";
		case DbType.Int64: return "Int64";
		case DbType.Object: return "Object";
		case DbType.SByte: return "SByte";
		case DbType.Single: return "Float";
		case DbType.String: return "String";
		case DbType.StringFixedLength: return "String";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "UInt32";
		case DbType.UInt64: return "UInt64";
		case DbType.VarNumeric: return "Decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}


public string GetSqlserverDefaultStr(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "=null";
		case DbType.AnsiStringFixedLength: return "=null";
		case DbType.Binary: return "=null";
		case DbType.Boolean: return "=0";
		case DbType.Byte: return "=null";
		case DbType.Currency: return "=0";
		case DbType.Date: return "=0";
		case DbType.DateTime: return "=getdate()";
		case DbType.Decimal: return "=0";
		case DbType.Double: return "=0";
		case DbType.Guid: return "=newid()";
		case DbType.Int16: return "=0";
		case DbType.Int32: return "=0";
		case DbType.Int64: return "=0";
		case DbType.Object: return "=null";
		case DbType.SByte: return "=null";
		case DbType.Single: return "=0";
		case DbType.String: return "=null";
		case DbType.StringFixedLength: return "=null";
		case DbType.Time: return "=null";
		case DbType.UInt16: return "=null";
		case DbType.UInt32: return "=0";
		case DbType.UInt64: return "=0";
		case DbType.VarNumeric: return "=0";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
</script>




































