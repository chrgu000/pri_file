<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" ResponseEncoding="UTF-8" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="TableName" %>
<%@ Property Name="nameSpace" Type="System.String" Default="" Optional="false" Category="Strings" Description="nameSpace" %>
<%@ Property Name="NSPostfix" Type="System.String" Default="" Optional="false" Category="Strings" Description="nameSpacePostfix" %>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
namespace WcfService
{

  [ServiceContract]
    public interface I<%=SourceTable.Name.Substring(2)%>WCF
    {
     


        #region Add
		[OperationContract]
        int Add(<%=SourceTable.Name.Substring(2)%> mode);


        #region del
         int Del(<%=SourceTable.Name.Substring(2)%> mode);

        #endregion
        #region update
         int Update(<%=SourceTable.Name.Substring(2)%> mode);
		
  	 int UpdateDepart(int id,string foreignKey);

	 int Update(string sql);

        #endregion
        #region select
        List<<%=SourceTable.Name.Substring(2)%>> GetList(string where);
         <%=SourceTable.Name%> GetMode
		(<% foreach (ColumnSchema col in SourceTable.Columns ){if(col.IsPrimaryKeyMember){%><%= GetCSType(col) %>  <%= col.Name %> <%}} %> );





         string GetStr(<%=SourceTable.Name.Substring(2) %> mode);
        #endregion
		
		#region paging
        public int count = 0;
        /// <summary>
        /// 分页存储过程
        /// </summary>
        /// <param name="size">显示的行数</param>
        /// <param name="index">第几页</param>
        /// <param name="column">排序的列 可以 null</param>
        /// <param name="orderType">asc或者desc null</param>
         List<<%= SourceTable.Name.Substring(2) %>> PageStoredProcedure(int size, int index, string column, string orderType);
		
        /// <summary>
        /// 分页存储过程
        /// </summary>
        /// <param name="sqlstr">查询字符串</param>
        /// <param name="size">显示的行数</param>
        /// <param name="index">第几页</param>
        /// <param name="column">排序的列 可以 null</param>
        /// <param name="orderType">asc或者desc null</param>
         List<<%= SourceTable.Name.Substring(2) %>> PageStoredProcedure
		(string sqlstr, int size, int index, string column, string orderType);
		 
		int GetCount();
		
		
        #endregion
		
		
		
    }
}


<script runat="template">
// My methods here.

public string GetCSType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
</script>