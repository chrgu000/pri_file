<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here."  ResponseEncoding="UTF-8"%>

<%@ Property Name="className" Type="System.String" Category="Strings" Description="类名称" %>
<%@ Property Name="methodInfo" Type="System.String" Category="Custom" Description="方法信息" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="CodeSmith.Engine.Json" %>
<%@ Import Namespace="CodeSmith.Engine.Json.Linq" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

import com.alibaba.dubbo.common.logger.Logger;
import com.alibaba.dubbo.common.logger.LoggerFactory;
import com.hxyc.iface.TestInterface;
import com.hxyc.service.impl.<%=className %>Impl;
import com.hxyc.thrift.<%=className %>;
import com.hxyc.utils.BsonUtils;
import org.bson.BSONObject;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.support.FileSystemXmlApplicationContext;

import java.nio.ByteBuffer;

/**
 * 
 * Created by 张相伟.
 */
public class <%=className %>ClientTest {
    protected static final Logger LOG = LoggerFactory.getLogger(<%=className %>ClientTest.class);
    private FileSystemXmlApplicationContext context;

    @Before
    public void setUp() throws Exception {
        LOG.info("------------ BEFORE -------------");
        context = new FileSystemXmlApplicationContext("conf/test.xml");
        context.start();
    }

    @After
    public void tearDown() throws Exception {
        LOG.info("------------ AFTER -------------");
        context.stop();
    }

    @Test()
    public void testClient() throws Exception {
        <%=className %>.Iface test =new <%=className %>Impl();
        
        
        
            <%
      //  System.Diagnostics.Debugger.Launch();  
        System.Diagnostics.Debugger.Break();
        string[] jsons= methodInfo.Split('~');
        for(int i=0;i<jsons.Length;i++)
        {
        string returnStr="";
                JObject root = JObject.Parse(jsons[i]);
                Dictionary<string, string> jsonObjs = new Dictionary<string, string>();
                  GetDic(root,jsonObjs);
             returnStr=jsonObjs["return"];%>
     <%=returnStr %> <%=jsonObjs["m"] %>=test.<%=jsonObjs["m"] %>(<% int index=0;   foreach (string key in jsonObjs.Keys) {if(key=="m")continue; if(key=="return")break; if(index>0){%><%=","%><%}  %> <%= setDefault(thriftToJava(jsonObjs[key]) ) %>  <% index++;}%>) ;
              //        Assert.assertEquals("", <%=jsonObjs["m"] %>);
              //        ByteBuffer buffer = test.getBson();
              //        BSONObject obj = BsonUtils.fromByteBuffer(buffer);
               System.out.println(<%=jsonObjs["m"] %>);
    }
        <%}
        %>
        

    }
}



     
<!-- #include file="../ScriptTemplate.cst" -->
<script runat="template" >
private string setDefault(string typeStr)
        {
                if(typeStr=="String")
                return "\"\"";
                  if(typeStr=="int")
                return "0";
              return "\"\"";
        }
</script>