<%@ Import Namespace="CodeSmith.Engine.Json" %>
<%@ Import Namespace="CodeSmith.Engine.Json.Linq" %>
<script runat="template">
public string Camel(string str)
{
    if(str.Length<2)
        return str;
	str=str.Substring(0,1).ToLower()+str.Substring(1);
	
	return str;
}
// My methods here.
public string GetUpper(string str)
{
	str=str.Substring(0,1).ToUpper()+str.Substring(1);
	return str;
}
// 去除_符号，首字母小写
public string GetAttributeCamel(string str)
{
	string[] strs=str.Split('_');
     str="";
    for(int i=0;i<strs.Length;i++)
    {
          if(i==0){
             str+=Camel(strs[i]);
        }else
             str+=GetUpper(strs[i]);
    }
    	return str;
}
// 去除_符号，首字母大写,第一个字母大写
public string GetUpperCamel(string str)
{
	string[] strs=str.Split('_');
     str="";
    for(int i=0;i<strs.Length;i++)
    {
        if(i==0){
             str+=GetUpper(strs[i]);
        }else
             str+=GetUpper(strs[i]);
    }
    	return str;
}

public string getT_Table(string str)
{
	str=str.Substring(2);
	str=str.Replace("_","");
	return str;
}
/// <summary>
/// 删除表的_ 符号开始字母小写
/// </summary>
/// <param name="str"></param>
/// <returns></returns>
public string del_Table(string str)
{
  // string asa=  str.Split(" ")[0];
     string[] strs=str.Split('_');
    str="";
    for(int i=0;i<strs.Length;i++)
    {
        if(i==0)
        str=Camel(strs[i]);
        else
            str+=GetUpper(strs[i]);
    }
    	return str;
}

/// <summary>
/// 所有字符小写
/// </summary>
/// <param name="str"></param>
/// <returns></returns>
public string getLetterUpper(string str)
{
    	return str.ToLower();
}

/// <summary>
/// 删除表的_ 符号.开始字母大写
/// </summary>
/// <param name="str"></param>
/// <returns></returns>
public string del_HeadUpper(string str)
{
  // string asa=  str.Split(" ")[0];
     string[] strs=str.Split('_');
     str="";
    for(int i=0;i<strs.Length;i++)
    {
        str+=GetUpper(strs[i]);
    }
    	return str;
}

/// <summary>
/// 删除字符的_ 符号.所以字母小写
/// </summary>
/// <param name="str"></param>
/// <returns></returns>
public string del_Column_Camel(string str)
{
  // string asa=  str.Split(" ")[0];
     string[] strs=str.Split('_');
    str="";
    for(int i=0;i<strs.Length;i++)
    {
        str+=Camel(strs[i]);
    }
    	return str;
}

/// <summary>
/// 删除字符的_ 符号.所以字母小写
/// </summary>
/// <param name="str"></param>
/// <returns></returns>
public string jeecg_Column_Camel(string str)
{
  // string asa=  str.Split(" ")[0];
     string[] strs=str.Split('_');
    if(strs.Length<=1)
    {
        return str.ToLower();
    }else
    {
        str="";
        for(int i=0;i<strs.Length;i++)
        {
            if(i==0)
                str+=strs[i].ToLower();
             else
            str+=GetUpper(strs[i].ToLower());
        }
    }
    	return str;
}






//获取mybatis类型
public string GetMysqltoMybatisTypeUpper(string colName,DbType dbtype)
{
	if (colName.EndsWith("TypeCode")) return colName;
	
	switch (dbtype)
	{
		case DbType.AnsiString: return "VARCHAR";
		case DbType.AnsiStringFixedLength: return "VARCHAR";
		case DbType.Binary: return "Byte[]";
		case DbType.Boolean: return "BIT";
		case DbType.Byte: return "INTEGER";  
		case DbType.Currency: return "DOUBLE";
		case DbType.Date: return "TIMESTAMP";
		case DbType.DateTime: return "TIMESTAMP";
		case DbType.Decimal: return "DOUBLE";
		case DbType.Double: return "DOUBLE";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "INTEGER";
		case DbType.Int32: return "INTEGER";
		case DbType.Int64: return "BIGINT";
		case DbType.Object: return "Object";
		case DbType.SByte: return "INTEGER";
		case DbType.Single: return "FLOAT";
		case DbType.String: return "VARCHAR";
		case DbType.StringFixedLength: return "VARCHAR";
		case DbType.Time: return "TIMESTAMP";
		case DbType.UInt16: return "INTEGER";
		case DbType.UInt32: return "INTEGER";
		case DbType.UInt64: return "BIGINT";
		case DbType.VarNumeric: return "NUMERIC";
		default:
		{
			return "VARCHAR";
		}
	}
} 


public string GetJavaFullTypeUpper(string colName,DbType dbType)
{
	if (colName.EndsWith("TypeCode")) return colName;
	
	switch (dbType)
	{
		case DbType.AnsiString: return "java.lang.String";
		case DbType.AnsiStringFixedLength: return "java.lang.String";
		case DbType.Binary: return "java.lang.Byte[]";
		case DbType.Boolean: return "java.lang.Boolean";
		case DbType.Byte: return "java.lang.Integer";
		case DbType.Currency: return "java.lang.Double";
		case DbType.Date: return "java.sql.Date";
		case DbType.DateTime: return "java.util.Date";
		case DbType.Decimal: return "java.lang.Double";
		case DbType.Double: return "java.lang.Double";
		case DbType.Guid: return "java.lang.Guid";
		case DbType.Int16: return "java.lang.short";
		case DbType.Int32: return "java.lang.Integer";
		case DbType.Int64: return "java.lang.Long";
		case DbType.Object: return "java.lang.Object";
		case DbType.SByte: return "java.lang.Integer";
		case DbType.Single: return "java.lang.Float";
		case DbType.String: return "java.lang.String";
		case DbType.StringFixedLength: return "java.lang.String";
		case DbType.Time: return "java.sql.Time";
		case DbType.UInt16: return "java.lang.Integer";
		case DbType.UInt32: return "java.lang.Integer";
		case DbType.UInt64: return "java.lang.Long";
		case DbType.VarNumeric: return "java.lang.Double";
		default:
		{
			return "String";
		}
	}
}



public string GetJavaTypeUpper(string colName,DbType dbType)
{
	if (colName.EndsWith("TypeCode")) return colName;
	
	switch (dbType)
	{
		case DbType.AnsiString: return "String";
		case DbType.AnsiStringFixedLength: return "String";
		case DbType.Binary: return "Integer[]";
		case DbType.Boolean: return "Boolean";
		case DbType.Byte: return "Integer";
		case DbType.Currency: return "Double";
		case DbType.Date: return "java.sql.Date";
		case DbType.DateTime: return "Date";
		case DbType.Decimal: return "Double";
		case DbType.Double: return "Double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "Integer";
		case DbType.Int64: return "Long";
		case DbType.Object: return "Object";
		case DbType.SByte: return "Integer";
		case DbType.Single: return "Float";
		case DbType.String: return "String";
		case DbType.StringFixedLength: return "String";
		case DbType.Time: return "java.sql.Time";
		case DbType.UInt16: return "Integer";
		case DbType.UInt32: return "Integer";
		case DbType.UInt64: return "Long";
		case DbType.VarNumeric: return "Double";
		default:
		{
			return "String";
		}
	}
}


public string convertColumnType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return Camel(column.Name)+".ToString()";
		case DbType.AnsiStringFixedLength: return Camel(column.Name)+".ToString()";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "("+Camel(column.Name)+" == \"1\" ? true : false)";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return Camel(column.Name)+".ToString()";
		case DbType.DateTime: return Camel(column.Name)+".ToString()";
		case DbType.Decimal: return  "decimal.Parse("+Camel(column.Name)+".ToString())";
		case DbType.Double: return  "double.Parse("+Camel(column.Name)+".ToString())";
		case DbType.Guid: return "Guid.NewGuid().ToString()";
		case DbType.Int16: return "short";
		case DbType.Int32: return  "int.Parse("+Camel(column.Name)+".ToString())";
		case DbType.Int64: return "long.Parse("+Camel(column.Name)+".ToString())";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return  "float.Parse("+Camel(column.Name)+".ToString())";
		case DbType.String: return Camel(column.Name)+".ToString()";
		case DbType.StringFixedLength: return Camel(column.Name)+".ToString()";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal.Parse("+Camel(column.Name)+".ToString())";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
    
    

public string GetCSTypeUpper(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "String";
		case DbType.AnsiStringFixedLength: return "String";
		case DbType.Binary: return "Byte[]";
		case DbType.Boolean: return "Boolean";
		case DbType.Byte: return "Byte";
		case DbType.Currency: return "Decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "Decimal";
		case DbType.Double: return "Double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "Int32";
		case DbType.Int64: return "Int64";
		case DbType.Object: return "Object";
		case DbType.SByte: return "SByte";
		case DbType.Single: return "Float";
		case DbType.String: return "String";
		case DbType.StringFixedLength: return "String";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "UInt32";
		case DbType.UInt64: return "UInt64";
		case DbType.VarNumeric: return "Decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

/// <summary>
/// 获取sqlserver的数据库类型值
/// </summary>
/// <param name="column"></param>
/// <param name="isDefault"></param>
/// <returns></returns>
public string getSqlserverDbType(ColumnSchema column,bool isDefault)
{
    string defaultVal="";
    if(isDefault)
       defaultVal= GetSqlserverDefaultStr(column);
    if(column.NativeType.ToUpper()=="VARCHAR"||column.NativeType.ToUpper()=="NVARCHAR"||column.NativeType.ToUpper()=="CHAR"
        ||column.NativeType.ToUpper()=="NCHAR")//||column.NativeType=="BIT"||column.NativeType=="bigint"||column.NativeType=="DateTime"||column.NativeType=="")
    {
        return column.NativeType+"("+column.Size+")"+defaultVal;
    }else if(column.NativeType.ToUpper()=="DECIMAL")
        return column.NativeType+"("+column.Precision+","+column.Scale+")"+defaultVal;
    else
        return column.NativeType+defaultVal;
}
/// <summary>
/// 获取sqlserver的数据库类型值
/// </summary>
/// <param name="column"></param>
/// <param name="isDefault"></param>
/// <returns></returns>
public string getSqlserverDbType(ColumnSchema column)
{
    
        return getSqlserverDbType(column,false);
}


/// <summary>
/// 获取sqlserver 存储过程的数据库类型值
/// </summary>
/// <param name="schema"></param>
/// <returns></returns>
public string getSqlserverProcDbType(ParameterSchema schema)
{
    if(schema.NativeType.ToUpper()=="VARCHAR"||schema.NativeType.ToUpper()=="NVARCHAR"||schema.NativeType.ToUpper()=="CHAR"
        ||schema.NativeType.ToUpper()=="NCHAR")//||column.NativeType=="BIT"||column.NativeType=="bigint"||column.NativeType=="DateTime"||column.NativeType=="")
    {
        return schema.NativeType+"("+schema.Size+")";
    }else if(schema.NativeType.ToUpper()=="DECIMAL")
        return schema.NativeType+"("+schema.Precision+","+schema.Scale+")";
    else
        return schema.NativeType;
}

public string GetCSDBTypeUpper(ParameterSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "String";
		case DbType.AnsiStringFixedLength: return "String";
		case DbType.Binary: return "Byte[]";
		case DbType.Boolean: return "Boolean";
		case DbType.Byte: return "Byte";
		case DbType.Currency: return "Decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "Decimal";
		case DbType.Double: return "Double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "Int32";
		case DbType.Int64: return "Int64";
		case DbType.Object: return "Object";
		case DbType.SByte: return "SByte";
		case DbType.Single: return "Float";
		case DbType.String: return "String";
		case DbType.StringFixedLength: return "String";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "UInt32";
		case DbType.UInt64: return "UInt64";
		case DbType.VarNumeric: return "Decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}


public string GetSqlserverDefaultStr(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "=null";
		case DbType.AnsiStringFixedLength: return "=null";
		case DbType.Binary: return "=null";
		case DbType.Boolean: return "=0";
		case DbType.Byte: return "=null";
		case DbType.Currency: return "=0";
		case DbType.Date: return "=0";
		case DbType.DateTime: return "=getdate()";
		case DbType.Decimal: return "=0";
		case DbType.Double: return "=0";
		case DbType.Guid: return "=newid()";
		case DbType.Int16: return "=0";
		case DbType.Int32: return "=0";
		case DbType.Int64: return "=0";
		case DbType.Object: return "=null";
		case DbType.SByte: return "=null";
		case DbType.Single: return "=0";
		case DbType.String: return "=null";
		case DbType.StringFixedLength: return "=null";
		case DbType.Time: return "=null";
		case DbType.UInt16: return "=null";
		case DbType.UInt32: return "=0";
		case DbType.UInt64: return "=0";
		case DbType.VarNumeric: return "=0";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}



/***
* 输出下拉框逻辑代码
*/
public string getDropDownListCtrl(ColumnSchemaCollection columns,string dropDownListStr)
{
    string str="";
    for(int i=0;i< columns.Count;i++){
        //str=str+ columns[i].Name;
        string name=isDropDownListStr(dropDownListStr,true,columns[i].Name);
        if(name!=""){
             str=str+ "$(\"#"+columns[i].Name+"\").chosen({\n"+
				"no_results_text: \"没有找到结果！\",\n"+
				"search_contains:true \n"+
			"}).change(function(){\n"+
			"	var name=$(this).find(\"option:selected\").text();\n"+
			"	$(\"#"+name+"\").val(name);\n"+
			"});"; 
       }
    }
    
    return str;
}

/***
* 根据数据类型，设置class
*/
public string getTypeClass(ColumnSchema column)
{
    string type="mysql";
    if(column.DataType==DbType.Decimal)
    {
        return "inputDevimal";
    }else
    if(column.Name =="tfCode")
        return "inputCode";
    return "";
}

/***
* 不一样的数据库长度计算不一样，mysql=Column.Size/3
*/
public int sqlTypeLength(ColumnSchema column)
{
    string type="mysql";
    if(column.DataType==DbType.Decimal)
    {
        return column.Precision;
    }else
    if(type=="mysql")
        return column.Size/3;
    return column.Size;
}

public string getMybatisInsert(TableSchema SourceTable)
{
    string retStr="";
    
   for(int i=0;i<SourceTable.Columns.Count;i++) {
       string colNmae=SourceTable.Columns[i].Name;
       string nowStr="";
       if(createTimeDefault(colNmae)){
           nowStr="now()"; 
       }else{
         nowStr="#{"+GetAttributeCamel(colNmae)+",jdbcType="+GetMysqltoMybatisTypeUpper(colNmae,SourceTable.Columns[i].DataType)+"}" ;  
       }
       if(i+1!=SourceTable.Columns.Count)
           nowStr=nowStr+",";
       if((i+1)%4==0){
           nowStr=nowStr+"\r\n";
       }
       retStr=retStr+nowStr;
    }
    return retStr;
}

 

/// <summary>
/// 获取mpping 的更新语句字符
/// </summary>
/// <param name="SourceTable"></param>
/// <returns></returns>
public string getMybatisUpdateSet(TableSchema SourceTable)
{
   string retStr="";
    for(int i=0;i<SourceTable.Columns.Count;i++) {
        string nowStr="";
         ColumnSchema  column=SourceTable.Columns[i];
        if(editIsContinue(column.Name)){
           nowStr ="" ;
        }else{
           nowStr=  ""+column.Name +"= #{"+GetAttributeCamel(column.Name)+",jdbcType="+GetMysqltoMybatisTypeUpper(column.Name,column.DataType)+"}"; 
        }
        
        if(i+1!=SourceTable.Columns.Count&&nowStr!=""){
            nowStr=nowStr+",";
        }
          if((i+1)%3==0){
           nowStr=nowStr+"\r\n";
       }
        if(i+1==SourceTable.Columns.Count&&nowStr==""){
             retStr=retStr.Substring(0,retStr.Length-1);
        }else{
             retStr=retStr+nowStr;
        }
        
    }
    return retStr;
}

/// <summary>
/// 处理getEntityExampleStr 的单个字段信息
/// </summary>
/// <param name="SourceTable"></param>
/// <returns></returns>
public string getEntityExampleColumnStr(string colName,DbType dataType)
{
     string name= GetAttributeCamel(colName);
    string methodName=GetUpperCamel(colName);
    string javaType=GetJavaTypeUpper(colName,dataType);
    string typeAndName=javaType+" "+name;
    string nowStr="";
    nowStr=nowStr+"public Criteria and"+methodName+"IsNull() {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+" is null\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";
    
    nowStr=nowStr+"public Criteria and"+methodName+"IsNotNull() {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+" is not null\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";
    
    nowStr=nowStr+"public Criteria and"+methodName+"EqualTo("+typeAndName+") {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+"=\", "+name+",\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";
    
    nowStr=nowStr+"public Criteria and"+methodName+"NotEqualTo("+typeAndName+") {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+" <> \", "+name+",\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";
    
    nowStr=nowStr+"public Criteria and"+methodName+"GreaterThan("+typeAndName+") {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+" > \", "+name+",\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";
    
    nowStr=nowStr+"public Criteria and"+methodName+"GreaterThanOrEqualTo("+typeAndName+") {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+" >= \", "+name+",\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";
    
    nowStr=nowStr+"public Criteria and"+methodName+"LessThan("+typeAndName+") {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+" < \", "+name+",\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";       
    
    nowStr=nowStr+"public Criteria and"+methodName+"LessThanOrEqualTo("+typeAndName+") {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+" <= \", "+name+",\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";  
    
    nowStr=nowStr+"public Criteria and"+methodName+"Like("+typeAndName+") {\r\n";
    nowStr=nowStr+"    addCriterion(\""+colName+" like \", "+name+",\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";  
    
    nowStr=nowStr+"public Criteria and"+methodName+"NotLike("+typeAndName+") {\r\n"; 
    nowStr=nowStr+"    addCriterion(\""+colName+" not like \", "+name+",\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";  
    
          nowStr=nowStr+"public Criteria and"+methodName+"In(List<"+javaType+"> values) {\r\n"; 
    nowStr=nowStr+"    addCriterion(\""+colName+" in \", values,\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";  
    
          nowStr=nowStr+"public Criteria and"+methodName+"NotIn(List<"+javaType+"> values) {\r\n"; 
    nowStr=nowStr+"    addCriterion(\""+colName+" not in \", values,\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";  
    
          nowStr=nowStr+"public Criteria and"+methodName+"Between("+javaType+" value1, "+javaType+" value2) {\r\n"; 
    nowStr=nowStr+"    addCriterion(\""+colName+" between \", value1,value2,\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";  
    
          nowStr=nowStr+"public Criteria and"+methodName+"NotBetween("+javaType+" value1, "+javaType+" value2) {\r\n"; 
    nowStr=nowStr+"    addCriterion(\""+colName+" not between \", value1,value2,\""+name+"\");\r\n";
    nowStr=nowStr+"return (Criteria) this;\r\n";
    nowStr=nowStr+"}\r\n";  
    nowStr=nowStr+"private "+javaType+" "+name+";\r\n";
    return nowStr;
}

/// <summary>
/// 获取实体 Mybatis Example字符
/// </summary>
/// <param name="SourceTable">表 信息</param>
///  <param name="SourceView">视图信息</param>
/// <returns></returns>
public string getEntityExampleStr(TableSchema SourceTable,ViewSchema SourceView)
{
   string retStr="";
    if(SourceTable!=null)
    for(int i=0;i<SourceTable.Columns.Count;i++) {
       
        retStr=retStr+getEntityExampleColumnStr(SourceTable.Columns[i].Name,SourceTable.Columns[i].DataType);
    }
    if(SourceView!=null)
    for(int i=0;i<SourceTable.Columns.Count;i++) {
       
        retStr=retStr+getEntityExampleColumnStr(SourceTable.Columns[i].Name,SourceTable.Columns[i].DataType);
    }
    return retStr;
}
/// <summary>
/// 获取实体 swggier 类型字符
/// </summary>
/// <param name="SourceTable"></param>
/// <returns></returns>
public string getEntitySwggingStr(TableSchema SourceTable,bool isEnable,bool isAdd)
{
   string retStr="";
    for(int i=0;i<SourceTable.Columns.Count;i++) {
         if(isAdd&&addIsContinue(SourceTable.Columns[i],"",0)){
            continue;
        }
        string name=GetAttributeCamel(SourceTable.Columns[i].Name);  
        string javaType=GetJavaTypeUpper(SourceTable.Columns[i].Name,SourceTable.Columns[i].DataType);
        string isNullCol= !SourceTable.Columns[i].AllowDBNull+""; 
        string description=SourceTable.Columns[i].Description.Replace("\r\n","").Replace("\n","").Replace("\"","\\\"");
        string dbType=SourceTable.Columns[i].DataType+"";  
        int length=SourceTable.Columns[i].Size;
        string maxNum="0";
        string enableStr="";
        if(!isEnable&&!SourceTable.Columns[i].IsPrimaryKeyMember){
            enableStr="//";
        }
        string nowStr=enableStr+"@ApiModelProperty(name = \""+name+"\", notes = \""+description+"\", dataType = \""+javaType+"\", required = "+GetAttributeCamel(isNullCol)+")\r\n";
        if(dbType=="Int64"){
            maxNum="9223372036854775807L";
        }else  if(dbType=="Int32"){
             maxNum="999999999";
        }else  if(dbType=="SByte"){ 
            maxNum="99";
        }
        if(maxNum!="0"){
             nowStr=enableStr+"@ApiModelProperty(name = \""+name+"\", notes = \""+description+",赋值范围在0 到 "+maxNum+"之间！\", dataType = \""+javaType+"\", required = "+GetAttributeCamel(isNullCol)+")\r\n";
             nowStr=nowStr+enableStr+"@Min(value = 0,message = \""+description+"("+name+") 限制最小值为0\")\r\n"; 
             nowStr=nowStr+enableStr+"@Max(value = "+maxNum+",message = \""+description+"("+name+") 限制最大值为"+maxNum+"\")\r\n"; 
        }
        if(javaType=="Date"){	
            nowStr=nowStr+enableStr+"@DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n";
            nowStr=nowStr+enableStr+"@JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n";   
        }else       
        if(length>0){
            if(javaType=="String"){
                length=length/3;
            }
            nowStr=nowStr+enableStr+"@Size(min = 1, max = "+length+", message = \""+description+"("+name+")长度在1-"+length+"之间\")\r\n";
        }
        if(!SourceTable.Columns[i].AllowDBNull){
            if(javaType=="String"){
                nowStr=nowStr+enableStr+"@NotEmpty(message = \""+description+"("+name+")不能为空！\")\r\n";
            }else
                nowStr=nowStr+enableStr+"@NotNull(message = \""+description+"("+name+")不能为空！\")\r\n";
        }
        nowStr=nowStr+enableStr+"private "+javaType+" "+name+";\r\n";
        retStr=retStr+nowStr;
    }
    return retStr;
}
/// <summary>
/// 获取实体 getset 字符
/// </summary>
/// <param name="SourceTable"></param>
/// <returns></returns>
public string getEntityGetSetStr(TableSchema SourceTable,bool isEnable,bool isAdd)
{
   string retStr="";
    for(int i=0;i<SourceTable.Columns.Count;i++) {
        if(isAdd&&addIsContinue(SourceTable.Columns[i],"",0)){
            continue;
        }
        string enableStr="";
        if(!isEnable&&!SourceTable.Columns[i].IsPrimaryKeyMember){
            enableStr="//";
        }
        string name= GetAttributeCamel(SourceTable.Columns[i].Name);
        string methodName=GetUpperCamel(SourceTable.Columns[i].Name);
        string javaType=GetJavaTypeUpper(SourceTable.Columns[i].Name,SourceTable.Columns[i].DataType);
        string isNullCol= SourceTable.Columns[i].AllowDBNull+"";
        string nowStr=enableStr+"public "+javaType+" get"+methodName+"() { return "+name+"; }\r\n";
        nowStr=nowStr+enableStr+"public void set"+methodName+"("+javaType+" "+name+") { this."+name+"="+name+"; }\r\n";
        retStr=retStr+nowStr;
    }
    return retStr;
}



/// <summary>
/// 获取实体 getset  保存时 字符
/// </summary>
/// <param name="SourceTable"></param>
/// <returns></returns>
public string getEntityGetSetInsertStr(TableSchema SourceTable)
{
   string retStr="";
    for(int i=0;i<SourceTable.Columns.Count;i++) {
         if(addIsContinue(SourceTable.Columns[i],"",0)){
            continue;
        }
        string name= GetAttributeCamel(SourceTable.Columns[i].Name);
        string methodName=GetUpperCamel(SourceTable.Columns[i].Name);
        string javaType=GetJavaTypeUpper(SourceTable.Columns[i].Name,SourceTable.Columns[i].DataType);
        string isNullCol= SourceTable.Columns[i].AllowDBNull+"";
        string nowStr="public "+javaType+" get"+methodName+"() { return "+name+"; }\r\n";
        nowStr=nowStr+"public void set"+methodName+"("+javaType+" "+name+") { this."+name+"="+name+"; }\r\n";
        retStr=retStr+nowStr;
    }
    return retStr;
}
/// <summary>
/// 获取实体 全参数构造函数  字符
/// </summary>
/// <param name="SourceTable"></param>
/// <returns></returns>
public string getEntityConstructorStr(TableSchema SourceTable,string tableName)
{
   string retStr=" public "+tableName+"Entity";
    string paramStr="";
    string setValues="";
    for(int i=0;i<SourceTable.Columns.Count;i++) {
         
        string name= GetAttributeCamel(SourceTable.Columns[i].Name);
        string methodName=GetUpperCamel(SourceTable.Columns[i].Name);
        string javaType=GetJavaTypeUpper(SourceTable.Columns[i].Name,SourceTable.Columns[i].DataType);
        string isNullCol= SourceTable.Columns[i].AllowDBNull+"";
        paramStr=paramStr+javaType+" "+name+"";
        setValues=setValues+"this."+name+"="+name+";\r\n";
        if(SourceTable.Columns.Count!=i+1){
            paramStr=paramStr+",";
        }
    }
    retStr=retStr+"("+paramStr+"){\r\n";
    retStr=retStr+setValues+"\r\n";
    retStr=retStr+"}\r\n";
    return retStr;
}


</script>




































